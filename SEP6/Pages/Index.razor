@page "/index"
@using Newtonsoft.Json;
@using SEP6.Data;
@using SEP6.Models;
@using SEP6.Pages.Components;
@using System.Globalization;
@inject HttpClient httpClient
@inject IMovieService movieService
@inject IUserService userService
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
<h3 id="MoviesTitleIndex">Movies</h3>

@if (moviesList != null && moviesList.Search != null)
{
    <div class="container">
        <div class="row">
            @foreach (var movie in moviesList.Search)
            {
                <div class="col-md-4">
                    <div class="poster-container">
                        <img src="@movie.Poster" class="poster-image" />
                        <div class="movie-info">
                            <div class="movie-title">@movie.Title</div>
                            <div class="movie-details" style="width: 20%; float:left">
                                <span class="movie-type">@textInfo.ToTitleCase(movie.Type)</span>  <span class="movie-year">@movie.Year</span>
                                
                            </div>
                            <div style="width: 80%; float:right">
                            <button @onclick="() => AddToFavorites(movie.ImdbID)" class="fa fa-heart btn"> Add to favorites</button>
                            </div
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
<Notification>

</Notification>
}
    </Authorized>
</AuthorizeView>
@code {

    public OMDBResult moviesList { get; set; }
    public OMDBResult movieTitles { get; set; }
    public MoviesOMDB moviesOMDB { get; set; }
    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string title = "The Room";
            moviesList = await movieService.GetMoviesFromOMDb(title);
            // Use the movie data as needed
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            toastService.ShowError("ERROR! - Movies could not load.");
        }
    }

    public async Task AddToFavorites(string movieId)
    {
        int intMovieId = int.Parse(movieId.Replace("t", ""));
        var serializedUser = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");

        var user = JsonConvert.DeserializeObject<User>(serializedUser);
        var username = user.Name;

        if (!string.IsNullOrEmpty(username))
        {
            try
            {
                Console.WriteLine("Adding to favorites");
                await movieService.PostFavoriteMovies(username, intMovieId);
                toastService.ShowSuccess("Movie added to favorites.");
                
            }
            catch (Exception ex)
            {
               Console.WriteLine(ex);
                toastService.ShowError("Movie could not be added to favorites.");
            }
        }

        
    }
}