@page "/searchresults"
@using Newtonsoft.Json;
@using SEP6.Data;
@using SEP6.Models;
@using SEP6.Pages.Components
@inject IMovieService movieService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs


<h3>Search results</h3>

@*@if (moviesList != null)
{
    @foreach (var movie in moviesList)
    {
        <div class="container">
            <div class="row">
                <div id="posters" class="col-md-4">
                    <table class="table">
                        <div>
                            <tr>
                                <th style="margin-right: 0;" class="card-text">Id: @movie.Id</th>
                                <th> - </th>
                                <th class="card-text">Title: @movie.title</th>
                                <th> - </th>
                            <th style="margin-right: 0;" class="card-text">Year: @movie.year</th>
                            </tr>
                        </div>
                    </table>
                </div>
            </div>
        </div>
    }

}*@
<div class="container">
    <table class="table">
        <tbody>
            @*@for (int i = 0; i < moviesList.Count; i += 3)
            {
                <tr>
                    @for (int j = i; j < i + 3 && j < moviesList.Count; j++)
                    {
                        var movie = moviesList[j];
                        <td>
                            <div>
                                <strong>Title: </strong>@movie.title
                                
                            </div>
                            <div>
                                <strong>Year: </strong>@movie.year
                                
                            </div>
                            <div>
                                <strong>Id: </strong>@movie.Id
                            </div>
                            <div>
                                <SfRating Value="@movie.ratings"></SfRating>
                            </div>
                        </td>
                    }
                </tr>
            }*@

            @foreach (var movie in moviesList)
            {
                <tr>
                    <td>
                        <div>
                            <strong>Title: </strong>@movie.title

                        </div>
                        <div>
                            <strong>Year: </strong>@movie.year

                        </div>
                        <div>
                            <strong>Id: </strong>@movie.Id
                        </div>
                        <div>
                            @if(movie.rating != null)
                            {
                                <SfRating ShowTooltip="true" ItemsCount="10" Value="@movie.rating.rating"> </SfRating>
                            }
                        </div>
                        <div>
                            <strong>Votes: </strong>@movie.rating.votes
                        </div>
                        <div>
                            <strong>Directors: </strong>@foreach (var directors in directorsList)
                            {
                                <div>
                                    directors.direct
                                </div>
                            }
                            {
                        </div>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>
@code {

    [Parameter]
    public string searchedMovie { get; set; }
    public List<Movies> movies { get; set; }
    [Parameter]
    public List<Movies> moviesList { get; set; }
    [Parameter]
    public List<Movies> directorsList { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("going through OnParamSet");
        var uri = new Uri(NavigationManager.Uri);
        var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
        moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged += HandleLocationChanged;
            HandleLocationChanged(null, new LocationChangedEventArgs(NavigationManager.Uri, false));
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    {
        var uri = new Uri(NavigationManager.Uri);
        var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
        moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    Console.WriteLine("Initializing Search Result");
    //    var uri = new Uri(uriHelper.Uri);
    //    var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
    //    moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);

    //}   
    //protected override async Task OnParametersSetAsync()
    //{
    //    Console.WriteLine("Initializing Search Result");
    //    var uri = new Uri(uriHelper.Uri);
    //    var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
    //    moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);
    //    await base.OnParametersSetAsync();
    //}
    
}
