@page "/searchresults"
@using Newtonsoft.Json;
@using SEP6.Data;
@using SEP6.Models;
@using SEP6.Pages.Components
@inject IMovieService movieService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs


<h3>Search results</h3>

<style>

    .e-rating-container.custom-font .e-rating-item-list:hover .e-rating-item-container .e-rating-icon,
    .e-rating-container.custom-font .e-rating-item-container .e-rating-icon {
        /* To change rated symbol fill color and un-rated symbol fill color */
        background: linear-gradient(to right, #ffe814 var(--rating-value), #d8d7d4 var(--rating-value));
        background-clip: text;
        -webkit-background-clip: text;
    }

</style>
<div class="container">
    <table class="table">
        <tbody>


            @foreach (var movie in moviesList)
            {
                <tr>
                    <img src="@movie.Poster" class="img-fluid" />
                    <td>
                        <div>
                            <strong>Title: </strong>@movie.title

                        </div>
                        <div>
                            <strong>Year: </strong>@movie.year

                        </div>
                        <div>
                            <strong>Id: </strong>@movie.Id
                        </div>
                        <div>
                            <strong>Votes: </strong>@movie.rating?.votes
                        </div>
                        @if (movie.directors != null)
                        {
                        @foreach (var director in movie.directors)
                        {
                          
                            <div>
                                <strong>Directors: </strong>
                                @if(director.Name != null)
                                {
                                    @director.Name;
                                }
                            </div>
                        }
                        }
                        <div>
                            <div>
                                <strong>Stars: </strong>
                                @if (movie.directors != null)
                                {
                                    if (movie.stars != null && movie.stars.Any())
                                    {
                                    @foreach (var stars in movie.stars)
                                    {

                                        @stars.Name
                                        if (!stars.Equals(movie.stars.Last()))
                                        {
                                            @(
                                                                        ", "
                                                                        )
                                            ;
                                        }
                                    }
                                    }
                                }
                            </div>
                        </div>
                        <div>
                            <SfRating CssClass="custom-font" ShowLabel="true" ShowTooltip="true" Precision="PrecisionType.Exact" ItemsCount="10" Value="@movie.rating?.rating"> </SfRating>
                        </div>
                        <button id="AddToFavoriteButton" class="btn btn-primary" >Add To Favorites List</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>
@code {

    [Parameter]
    public string searchedMovie { get; set; }
    public List<Movies> movies { get; set; }
    [Parameter]
    public List<Movies> moviesList { get; set; }
    [Parameter]
    public List<MoviesOMDB> Posters { get; set; }
    public List<Movies> favorited { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("going through OnParamSet");
        var uri = new Uri(NavigationManager.Uri);
        var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
        moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);

        //Posters = await movieService.GetPosterForMovie(title);

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged += HandleLocationChanged;
            HandleLocationChanged(null, new LocationChangedEventArgs(NavigationManager.Uri, true));
        }
    }

    //private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    //{
    //    var uri = new Uri(NavigationManager.Uri);
    //    var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");
    //    moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);
    //    StateHasChanged();
    //}

    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    {
        var uri = new Uri(NavigationManager.Uri);
        var moviesJson = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("movies");

        if (!string.IsNullOrEmpty(moviesJson))
        {
            moviesList = JsonConvert.DeserializeObject<List<Movies>>(moviesJson);
        }
        else
        {
            moviesList = new List<Movies>();
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    public async Task AddToFavorites(Movies movie)
    {
        favorited.Add(movie);
    }

}
