@page "/favorites"
@using Newtonsoft.Json;
@using SEP6.Data;
@using SEP6.Models;
@using SEP6.Authentication;
@using SEP6.Pages.Components;
@using System.Globalization;
@inject IUserService userService
@inject IMovieService movieService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@inject IToastService toastService
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>

    .e-rating-container.custom-font .e-rating-item-list:hover .e-rating-item-container .e-rating-icon,
    .e-rating-container.custom-font .e-rating-item-container .e-rating-icon {
        background: linear-gradient(to right, #ffe814 var(--rating-value), #d8d7d4 var(--rating-value));
        background-clip: text;
        -webkit-background-clip: text;
    }
</style>
<AuthorizeView>
    <Authorized>
<div class="container">
    <table class="table">
        <tbody>

            @if (userFavorites != null && userFavorites.Favorites != null)
            {
            @foreach (var movie in userFavorites.Favorites)
            {
                <tr>
                    @if(movie.Poster != "N/A") {
                        <img src="@movie.Poster" class="img-fluid" />
                    }else
                    {
                        <img src="~/img/poster-holder.jpg"/>
                    }
                    <td>
                        <div>
                            <strong>Title: </strong>@movie.title

                        </div>
                        <div>
                            <strong>Year: </strong>@movie.year

                        </div>
                        <div>
                            <strong>Id: </strong>@movie.Id
                        </div>
                        <div>
                            <strong>Votes: </strong>@movie.rating?.votes
                        </div>
                        @if (movie.directors != null)
                        {
                        @foreach (var director in movie.directors)
                        {
                          
                            <div>
                                <strong>Directors: </strong>
                                @if(director.Name != null)
                                {
                                    @director.Name;
                                }
                            </div>
                        }
                        }
                        <div>
                            <div>
                                <strong>Stars: </strong>
                                @if (movie.directors != null)
                                {
                                    if (movie.stars != null && movie.stars.Any())
                                    {
                                    @foreach (var stars in movie.stars)
                                    {

                                        @stars.Name
                                        if (!stars.Equals(movie.stars.Last()))
                                        {
                                            @(
                                                                        ", "
                                                                        )
                                            ;
                                        }
                                    }
                                    }
                                }
                            </div>
                        </div>
                        <div>
                            <SfRating CssClass="custom-font" ShowLabel="true" ShowTooltip="true" Precision="PrecisionType.Exact" ItemsCount="10" Value="@movie.rating?.rating"> </SfRating>
                        </div>
                            <button @onclick="() => RemoveFromFavoritesList(movie.Id)" class="btn"><i class="fa fa-close"></i> Remove From favorites</button>
                    </td>
                        
                </tr>
                    
            }
            }
        </tbody>
        
    </table>
</div>

<Notification>
     
</Notification>
    </Authorized>
</AuthorizeView>
@code {

    [Parameter]
    public List<Movies> movies { get; set; }
    [Parameter]
    public List<Movies> moviesList { get; set; }
    [Parameter]
    public List<MoviesOMDB> Posters { get; set; }
    public Movies movie { get; set; }

    public User userFavorites { get; set; }
    public string username { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState?.User;

        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            var serializedUser = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
            var deserializedUser = JsonConvert.DeserializeObject<User>(serializedUser);
            username = deserializedUser.Name;
            await LoadFavoriteMovies();
        }
        else
        {
            NavigationManager.NavigateTo("/login"); // Redirect to the login page
        }
    }

    private async Task LoadFavoriteMovies()
    {
        try
        {
            userFavorites = await movieService.GetFavoriteMovies(username);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            toastService.ShowError("Failed to load favorite movies.");
        }
    }

    public async Task RemoveFromFavoritesList(int movieId)
    {
        if (!string.IsNullOrEmpty(username))
        {
            try
            {
                Console.WriteLine("Removing from favorites");
                await movieService.RemoveFromFavorites(username, movieId);
                toastService.ShowSuccess("Movie removed from favorites.");
                await LoadFavoriteMovies();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                toastService.ShowError("Failed to remove movie from favorites.");
            }
        }
    }
}
